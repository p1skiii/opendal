Feature Description
The OpenDAL Python binding now releases all its services in a single package, which makes it difficult to use and extend. I propose splitting it into separate packages, similar to what I've done with opendalfs.
OpenDAL Python 绑定现在在单个包中发布其所有服务，这使得它难以使用和扩展。我建议将其拆分为单独的包，类似于我对 opendalfs 所做的。


Problem and Solution
OpenDAL Python is large yet still doesn't cover all the services users need.
OpenDAL Python 很大，但仍然不能涵盖用户需要的所有服务。

We can divide it into multiple packages, making opendal a virtual meta-package that only provides the Python API and imports the correct service on demand when needed.
我们可以将其划分为多个包，使 opendal 成为一个虚拟的元包，它只提供 Python API，并在需要时按需导入正确的服务。

For example, as I showed up in opendalfs:
例如，正如我在 opendalfs 中显示的那样：

https://github.com/fsspec/opendalfs/blob/e19d28eb9f82e285685f91b3c80805146759b7d7/opendalfs/fs.py#L8-L25

    def __init__(self, scheme, *args, **kwargs):
        super().__init__(*args, **kwargs)

        try:
            # Load the module dynamically based on scheme
            module = importlib.import_module(f"opendalfs_service_{scheme}")
            # Get the file system class based on scheme
            fs_class = getattr(module, f"{scheme.capitalize()}FileSystem")
            # initialize the file system with the kwargs
            self.fs = fs_class(**kwargs)
        except ImportError:
            raise ImportError(
                f"Cannot import opendal_service_{scheme}, please check if the module exists"
            )
        except AttributeError:
            raise AttributeError(
                f"Cannot find {scheme.capitalize()}FileSystem in opendal_service_{scheme}"
            )
Additional Context
No response  无响应

Are you willing to contribute to the development of this feature?

Yes, I am willing to contribute to the development of this feature.
是的，我愿意为此功能的开发做出贡献。
Activity

Xuanwo
added 
enhancement
New feature or request
 
bindings/python
 on Jul 29, 2024

Xuanwo
mentioned this on Aug 6, 2024
feat(bindings/python): strip the library for minimum file size #4971

Xuanwo
mentioned this in 2 issues on Oct 19, 2024
bug: Python binding not working for the ftp protocol #5183
A cargo feature services-all to enable all available services #5207
Xuanwo
Xuanwo commented on Oct 22, 2024
Xuanwo
on Oct 22, 2024
Member
Author
cc @Zheaoli, do you have any ideas?
CC ， 你有什么想法吗？


Xuanwo
mentioned this on Nov 2, 2024
EPIC: Make OpenDAL Python The Greatest #5273
messense
messense commented on Jan 8
messense
on Jan 8
Member
Honestly I don't think it should be splited by each service, It'll just add lots of bloated binary wheels that contains duplicated opendal, tokio and TLS library compiled machine code which is not great.
老实说，我认为它不应该被每个服务拆分，它只会添加许多臃肿的二进制轮子，其中包含重复的 opendal、tokio 和 TLS 库编译的机器代码，这并不是很好。

We could still have a default/core package that contains most of the services, but provide other non-default services as separate packages.
我们仍然可以有一个包含大多数服务的 default/core 包，但将其他非 default 服务作为单独的包提供。

opendal: pure python meta package
opendal：纯 Python 元包
opendal-core: default services, any services that does not require dynamic link to some system packages (like gssapi, krb5 etc) can be enabled
opendal-core：默认服务，任何不需要动态链接到某些系统包（如 gssapi、krb5 等）的服务都可以启用
opendal-$service: other $service
opendal-$service：其他$service
Xuanwo
Xuanwo commented on Jan 8
Xuanwo
on Jan 8 · edited by Xuanwo
Member
Author
The OpenDAL Rust core is working on splitting into opendal-core (which will exclude tokio and tls), opendal-services-*, and opendal-layers-*. I believe this change will make more contributions to this issue.
OpenDAL Rust 核心正在努力拆分为 opendal-core（将不包括 tokio 和 tls）、opendal-services-* 和 opendal-layers-*。我相信这个变化会对这个问题做出更多贡献。

